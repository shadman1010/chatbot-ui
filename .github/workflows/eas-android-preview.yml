name: Build Android Preview (APK)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - '.gitignore'
      - 'eas.json'

jobs:
  build-preview-android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        # Use legacy peer deps to bypass React 19 / react-native-web@0.19 peer range mismatch
        env:
          NPM_CONFIG_LEGACY_PEER_DEPS: 'true'
        run: npm ci

      - name: Install EAS CLI
        run: npm install -g eas-cli

      - name: Verify EAS auth (token auto mode)
        env:
          EXPO_TOKEN: ${{ secrets.EAS_TOKEN }}
        run: |
          # Newer EAS CLI auto-auths via EXPO_TOKEN; explicit login not required.
          eas whoami || echo "Using EXPO_TOKEN for non-interactive auth"

      - name: Cancel existing queued preview builds (best-effort)
        if: ${{ secrets.EAS_TOKEN != '' }}
        env:
          EXPO_TOKEN: ${{ secrets.EAS_TOKEN }}
        run: |
          set +e
          IDS=$(eas build:list --status new --status in-queue --platform android --json | jq -r '.[] | select(.buildProfile=="preview") | .id')
          for id in $IDS; do
            echo "Canceling existing build $id";
            eas build:cancel $id || true;
          done
          echo "Done cancel attempts"

      - name: Build (blocking preview APK)
        id: build
        env:
          EXPO_TOKEN: ${{ secrets.EAS_TOKEN }}
        run: |
          set -euo pipefail
          JSON=$(eas build --platform android --profile preview --non-interactive --wait --json)
          echo "$JSON" | jq '.'
          # EAS may return an array (even for a single build). Normalize to a single object.
          ROOT=$(echo "$JSON" | jq 'if type=="array" then (.[0] // {}) else . end')
          # Guard: ensure we have something
          if [ "$(echo "$ROOT" | jq -r 'type')" != "object" ]; then
            echo "Unexpected JSON from EAS build --json" >&2
            exit 1
          fi
          BUILD_ID=$(echo "$ROOT" | jq -r '.id // empty')
          if [ -z "$BUILD_ID" ]; then
            echo "No build ID found in EAS JSON" >&2
            exit 1
          fi
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          STATUS=$(echo "$ROOT" | jq -r '.status // empty' | tr '[:upper:]' '[:lower:]')
          if [ "$STATUS" != "finished" ]; then
            echo "Build did not finish successfully (status=$STATUS)" >&2
            exit 1
          fi
          URL=$(echo "$ROOT" | jq -r '.artifacts.buildUrl // .artifacts.applicationArchiveUrl // empty')
          echo "apk_url=$URL" >> $GITHUB_OUTPUT
          echo "Artifact URL: $URL"

      - name: Summary
        run: |
          echo "APK Download URL: ${{ steps.build.outputs.apk_url }}" >> $GITHUB_STEP_SUMMARY
